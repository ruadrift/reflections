What happens when you initialize a repository? Why do you need to do it?
git init will create a .git file with the meta data for the git repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?
staging area has what you want to commit and working directory are all the files

git commit -m "Commit message"

Commit Messages
Message Structure

A commit messages consists of three distinct parts separated by a blank line: the title, an optional body and an optional footer. The layout looks like this:

type: subject

body

footer

The title consists of the type of the message and subject.
The Type

The type is contained within the title and can be one of these types:

    feat: a new feature
    fix: a bug fix
    docs: changes to documentation
    style: formatting, missing semi colons, etc; no code change
    refactor: refactoring production code
    test: adding tests, refactoring test; no production code change
    chore: updating build tasks, package manager configs, etc; no production code change

The Subject

Subjects should be no greater than 50 characters, should begin with a capital letter and do not end with a period.

Use an imperative tone to describe what a commit does, rather than what it did. For example, use change; not changed or changes.
The Body

Not all commits are complex enough to warrant a body, therefore it is optional and only used when a commit requires a bit of explanation and context. Use the body to explain the what and why of a commit, not the how.

When writing a body, the blank line between the title and the body is required and you should limit the length of each line to no more than 72 characters.
The Footer

The footer is optional and is used to reference issue tracker IDs.
Example Commit Message

feat: Summarize changes in around 50 characters or less

More detailed explanatory text, if necessary. Wrap it to about 72
characters or so. In some contexts, the first line is treated as the
subject of the commit and the rest of the text as the body. The
blank line separating the summary from the body is critical (unless
you omit the body entirely); various tools like `log`, `shortlog`
and `rebase` can get confused if you run the two together.

Explain the problem that this commit is solving. Focus on why you
are making this change as opposed to how (the code explains that).
Are there side effects or other unintuitive consequenses of this
change? Here's the place to explain them.

Further paragraphs come after blank lines.

 - Bullet points are okay, too

 - Typically a hyphen or asterisk is used for the bullet, preceded
   by a single space, with blank lines in between, but conventions
   vary here

If you use an issue tracker, put references to them at the bottom,
like this:

Resolves: #123
See also: #456, #789

---------
get diff #with no arguments compares working directory to staging area to see unstaged changes
get diff --stage #compares staged files with repository to make sure you've made all the changes
get diff --hard # wipes all changes in working directory 
                # - only run after running get diff and get diff --staged
get checkout master #gets the original

How can you use the staging area to make sure you have one commit per logical change?
git diff --staged

git branch #shows branches
git branch easy-mode #creates easy-mode branch
git checkout easy-mode #sends updates to easy-mode branch
git checkout -b new_branch_name #is the same as the two previous commands

What are some situations when branches would be helpful in keeping your history organized? How would branches help? 
changes can be separated from the working code

git log --graph --oneline master coins #visualize two branches master and coins

How do the diagrams help you visualize the branch structure?
you can see what features/bug fixes happened at what time in the product development

git merge master coins #creates a merged version of the two branches
git show ID #shows the differences between the commit and its parent
git branch -d coins #deletes the merged label - not the commits

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
to see where the merge occured

git log -n 1  #only shows 1 log entry
git merge master easy-mode #updates easy-mode with latest changes to master
if conflicts occur then look at the source code which will be marked up with ==== symbols

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Pros: saves alot of trouble
Cons: can be confusing on how to fix conflicts

